import logging
import sqlite3
import re
import os
from datetime import datetime, timedelta
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            telegram_name TEXT,
            c95_name TEXT,
            c95_profile_url TEXT,
            registered_at TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            workout_type TEXT NOT NULL,
            distance REAL NOT NULL,
            date TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

init_db()

def register_user(user_id, telegram_name, c95_name, c95_url):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    registered_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, telegram_name, c95_name, c95_profile_url, registered_at)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, telegram_name, c95_name, c95_url, registered_at))
    
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def save_workout(user_id, workout_type, distance):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        INSERT INTO workouts (user_id, workout_type, distance, date)
        VALUES (?, ?, ?, ?)
    ''', (user_id, workout_type, distance, current_time))
    
    conn.commit()
    conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–∞—Ç–∞ - –û–î–ù–ê –∫–Ω–æ–ø–∫–∞
def get_chat_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üèÉ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É")]
    ], resize_keyboard=True, one_time_keyboard=False)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –õ–° - –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
def get_private_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton("üìà –¢–æ–ø –º–µ—Å—è—Ü–∞"), KeyboardButton("üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
def start_bot(update, context):
    user = update.message.from_user
    chat_type = update.message.chat.type
    
    if chat_type == 'private':
        # –í –õ–° - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
        user_data = get_user(user.id)
        if user_data:
            message = f"üèÉ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data[2]}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            message = "üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
        
        update.message.reply_text(message, reply_markup=get_private_keyboard())
    else:
        # –í —á–∞—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
        update.message.reply_text(
            "üèÉ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É:",
            reply_markup=get_chat_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üèÉ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É"
def add_run_button(update, context):
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    user_data = get_user(user.id)
    if not user_data:
        update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –õ–° —É –±–æ—Ç–∞:\n\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" 
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
            "3. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            reply_markup=get_chat_keyboard()
        )
        return
    
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    update.message.reply_text(
        f"üìù –í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–æ–±–µ–∂–∫–∏:\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ 5 –∫–º\n" 
        f"‚Ä¢ 10.5 –∫–º\n"
        f"‚Ä¢ 7,2 –∫–º\n\n"
        f"–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç #—è–ø–æ–±–µ–≥–∞–ª",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True)
    )
    
    context.user_data['waiting_for_distance'] = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
def handle_distance_input(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if text.lower() == '–æ—Ç–º–µ–Ω–∞':
        context.user_data.pop('waiting_for_distance', None)
        update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_chat_keyboard())
        return
    
    if context.user_data.get('waiting_for_distance'):
        # –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        matches = re.search(r'(\d+[.,]?\d*)\s*(–∫–º|km)?', text, re.IGNORECASE)
        if matches:
            try:
                distance_str = matches.group(1).replace(',', '.')
                distance_km = float(distance_str)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                save_workout(user.id, 'run', distance_km)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('waiting_for_distance', None)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –õ–°
                try:
                    user_data = get_user(user.id)
                    c95_name = user_data[2] or user.first_name
                    
                    user.send_message(
                        f"‚úÖ –ü—Ä–æ–±–µ–∂–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
                        f"üèÉ‚Äç‚ôÇÔ∏è –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_km} –∫–º\n"
                        f"üë§ –û—Ç –∏–º–µ–Ω–∏: {c95_name}\n"
                        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                    )
                except:
                    pass
                
                # –í —á–∞—Ç–µ - –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                update.message.reply_text(
                    f"‚úÖ {distance_km} –∫–º –∑–∞–ø–∏—Å–∞–Ω–æ!",
                    reply_markup=get_chat_keyboard()
                )
                
            except ValueError:
                update.message.reply_text(
                    "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∫–º",
                    reply_markup=get_chat_keyboard()
                )
        else:
            update.message.reply_text(
                "‚ùå –ù–µ –≤–∏–∂—É –¥–∏—Å—Ç–∞–Ω—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∫–º",
                reply_markup=get_chat_keyboard()
            )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –õ–°
def start_registration(update, context):
    user = update.message.from_user
    
    message = "üîó *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
    message += "1. –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ s95.ru\n"
    message += "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://s95.ru/athletes/XXXXX\n"
    message += "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n"
    message += "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ."
    
    update.message.reply_text(message, parse_mode='Markdown')
    context.user_data['registration_step'] = 'waiting_url'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update, context):
    text = update.message.text
    user = update.message.from_user
    chat_type = update.message.chat.type
    
    if not text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
    if chat_type == 'private':
        registration_step = context.user_data.get('registration_step')
        
        if registration_step == 'waiting_url':
            if 's95.ru/athletes/' in text:
                c95_url = text.strip()
                context.user_data['c95_url'] = c95_url
                context.user_data['registration_step'] = 'waiting_name'
                
                update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ –°95:")
            else:
                update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –°95. –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞: https://s95.ru/athletes/XXXXX")
        
        elif registration_step == 'waiting_name':
            c95_name = text.strip()
            c95_url = context.user_data.get('c95_url')
            
            if c95_url:
                register_user(user.id, user.first_name, c95_name, c95_url)
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.clear()
                
                message = f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                message += f"üë§ *–ò–º—è:* {c95_name}\n"
                message += f"üîó *–ü—Ä–æ—Ñ–∏–ª—å:* {c95_url}\n\n"
                message += "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–±–µ–∂–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ —á–∞—Ç–µ!"
                
                update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_private_keyboard())
        
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
            if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                show_my_stats(update, context)
            elif text == "üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏":
                show_top_week(update, context)
            elif text == "üìà –¢–æ–ø –º–µ—Å—è—Ü–∞":
                show_top_month(update, context)
            elif text == "üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                start_registration(update, context)
    
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        if text == "üèÉ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É":
            add_run_button(update, context)
        else:
            handle_distance_input(update, context)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def show_my_stats(update, context):
    user = update.message.from_user
    user_data = get_user(user.id)
    
    if not user_data:
        update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=get_private_keyboard())
        return
    
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    
    since_date_week = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance) FROM workouts WHERE user_id = ? AND date > ?', (user.id, since_date_week))
    week_stats = cursor.fetchone()
    
    since_date_month = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance) FROM workouts WHERE user_id = ? AND date > ?', (user.id, since_date_month))
    month_stats = cursor.fetchone()
    
    conn.close()
    
    c95_name, c95_url = user_data[2], user_data[3]
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {c95_name}*\n\n"
    if c95_url:
        message += f"üîó *–ü—Ä–æ—Ñ–∏–ª—å:* [–°95]({c95_url})\n"
    
    if week_stats and week_stats[0]:
        message += f"\nüìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
        message += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {week_stats[0]}\n"
        message += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {week_stats[1]:.1f} –∫–º\n"
    
    if month_stats and month_stats[0]:
        message += f"\nüìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
        message += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {month_stats[0]}\n"
        message += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats[1]:.1f} –∫–º\n"
    
    if not week_stats[0] and not month_stats[0]:
        message += f"\nüì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–∂–µ–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —á–∞—Ç–µ!"
    
    update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_private_keyboard())

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–ø–∞
def get_top_workouts(days=7):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        SELECT u.c95_name, u.c95_profile_url, SUM(w.distance) as total_distance
        FROM workouts w
        JOIN users u ON w.user_id = u.user_id
        WHERE w.date > ?
        GROUP BY u.user_id
        ORDER BY total_distance DESC
        LIMIT 10
    ''', (since_date,))
    
    top_list = cursor.fetchall()
    conn.close()
    return top_list

def show_top_week(update, context):
    top_list = get_top_workouts(7)
    send_top_message(update, top_list, "–Ω–µ–¥–µ–ª—é")

def show_top_month(update, context):
    top_list = get_top_workouts(30)
    send_top_message(update, top_list, "–º–µ—Å—è—Ü")

def send_top_message(update, top_list, period_name):
    if not top_list:
        update.message.reply_text(f"üèÜ –ó–∞ {period_name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_private_keyboard())
        return
        
    message = f"üèÜ *–¢–û–ü –∑–∞ {period_name}:*\n\n"
    
    for i, (c95_name, c95_url, total_distance) in enumerate(top_list, 1):
        if c95_url:
            message += f"{i}. [{c95_name}]({c95_url}): {total_distance:.1f} –∫–º\n"
        else:
            message += f"{i}. {c95_name}: {total_distance:.1f} –∫–º\n"
    
    update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_private_keyboard())

def main():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start_bot))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... (—É–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
