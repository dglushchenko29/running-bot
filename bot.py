import logging
import sqlite3
import re
import os
from datetime import datetime, timedelta
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            user_name TEXT,
            workout_type TEXT NOT NULL,
            distance REAL NOT NULL,
            date TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_workout(user_id, user_name, workout_type, distance):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
        INSERT INTO workouts (user_id, user_name, workout_type, distance, date)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, user_name, workout_type, distance, current_time))
    conn.commit()
    conn.close()

# –ú–µ–Ω—é (–ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /menu)
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton("üìà –¢–æ–ø –º–µ—Å—è—Ü–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True, one_time_keyboard=True)  # one_time_keyboard - —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

# –ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é
def show_menu(update, context):
    update.message.reply_text(
        "üèÉ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

def get_user_stats(user_id, days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance), AVG(distance) FROM workouts WHERE user_id = ? AND date > ?', (user_id, since_date))
    stats = cursor.fetchone()
    conn.close()
    return stats

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
def add_reaction(update, emoji="üî•"):
    try:
        update.message.reply_text(emoji)  # –ü—Ä–æ—Å—Ç–∞—è —ç–º–æ–¥–∑–∏ –∫–∞–∫ —Ä–µ–∞–∫—Ü–∏—è
    except:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
def handle_workout_message(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if not text:
        return
    
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    workout_type = None
    emoji = "üî•"
    if '#—è–ø–æ–±–µ–≥–∞–ª' in text_lower:
        workout_type = 'run'
        emoji = "üèÉ‚Äç‚ôÇÔ∏è"
    elif '#—è–ø–æ–∫—Ä—É—Ç–∏–ª' in text_lower:
        workout_type = 'bike'
        emoji = "üö¥‚Äç‚ôÇÔ∏è"
    elif '#—è–ø–æ–ø–ª–∞–≤–∞–ª' in text_lower:
        workout_type = 'swim'
        emoji = "üèä‚Äç‚ôÇÔ∏è"
    else:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ö–µ—à—Ç–µ–≥–∞
    
    # –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    matches = re.search(r'(\d+[.,]?\d*)\s*(–∫–º|km)', text, re.IGNORECASE)
    if matches:
        try:
            distance_str = matches.group(1).replace(',', '.')
            distance_km = float(distance_str)
            
            user_name = user.first_name or user.username or "–ê–Ω–æ–Ω–∏–º"
            save_workout(user.id, user_name, workout_type, distance_km)
            
            # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é (–≤—Å–µ–º –≤–∏–¥–Ω–æ)
            add_reaction(update, emoji)
            
            # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é)
            update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {distance_km} –∫–º!\n/menu - –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_to_message_id=update.message.message_id
            )
        except ValueError:
            pass

# –ö–Ω–æ–ø–∫–∞ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
def my_stats(update, context):
    user = update.message.from_user
    stats_week = get_user_stats(user.id, 7)
    stats_month = get_user_stats(user.id, 30)
    
    if not stats_week or not stats_week[0]:
        update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=get_main_keyboard())
        return
    
    wk_workouts, wk_total, wk_avg = stats_week
    mn_workouts, mn_total, mn_avg = stats_month
    
    message = f"üèÉ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.first_name}:\n\n"
    message += f"üìÖ –ù–µ–¥–µ–ª—è: {wk_workouts} –ø—Ä–æ–±–µ–∂–µ–∫, {wk_total:.1f} –∫–º\n"
    message += f"üìÖ –ú–µ—Å—è—Ü: {mn_workouts} –ø—Ä–æ–±–µ–∂–µ–∫, {mn_total:.1f} –∫–º\n"
    
    update.message.reply_text(message, reply_markup=get_main_keyboard())

# –¢–æ–ø—ã (–ø—É–±–ª–∏—á–Ω—ã–µ)
def get_top_workouts(days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT user_name, SUM(distance) FROM workouts WHERE date > ? GROUP BY user_id ORDER BY SUM(distance) DESC LIMIT 10', (since_date,))
    top_list = cursor.fetchall()
    conn.close()
    return top_list

def top_week(update, context):
    top_list = get_top_workouts(7)
    send_top_message(update, top_list, "–Ω–µ–¥–µ–ª—é")

def top_month(update, context):
    top_list = get_top_workouts(30)
    send_top_message(update, top_list, "–º–µ—Å—è—Ü")

def send_top_message(update, top_list, period_name):
    if not top_list:
        update.message.reply_text(f"üèÜ –ó–∞ {period_name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_keyboard())
        return
        
    message = f"üèÜ –¢–û–ü –∑–∞ {period_name}:\n"
    for i, (user_name, distance) in enumerate(top_list, 1):
        message += f"{i}. {user_name}: {distance:.1f} –∫–º\n"
    
    update.message.reply_text(message, reply_markup=get_main_keyboard())

def help_command(update, context):
    help_text = "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ: 5 –∫–º #—è–ø–æ–±–µ–≥–∞–ª\nüî• –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é\n‚úÖ –û—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ\n\n/menu - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    update.message.reply_text(help_text, reply_markup=get_main_keyboard())

def main():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("menu", show_menu))
    dispatcher.add_handler(CommandHandler("start", show_menu))
    dispatcher.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.text("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), my_stats))
    dispatcher.add_handler(MessageHandler(Filters.text("üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏"), top_week))
    dispatcher.add_handler(MessageHandler(Filters.text("üìà –¢–æ–ø –º–µ—Å—è—Ü–∞"), top_month))
    dispatcher.add_handler(MessageHandler(Filters.text("‚ùì –ü–æ–º–æ—â—å"), help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_workout_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
