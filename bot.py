import os
import telebot
from telebot import types
import sqlite3
from datetime import datetime, timedelta
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('running.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS runs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            distance REAL NOT NULL,
            date TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("Database initialized")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞
def add_run(user_id, username, distance, date=None):
    if date is None:
        date = datetime.now().strftime('%Y-%m-%d')
    
    conn = sqlite3.connect('running.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO runs (user_id, username, distance, date)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, distance, date))
    
    conn.commit()
    conn.close()
    logger.info(f"Added run: user_id={user_id}, distance={distance}km, date={date}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
def get_weekly_distance(user_id):
    conn = sqlite3.connect('running.db')
    cursor = conn.cursor()
    
    week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    
    cursor.execute('''
        SELECT SUM(distance) FROM runs 
        WHERE user_id = ? AND date >= ?
    ''', (user_id, week_ago))
    
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result[0] is not None else 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–±–µ–≥–æ–≤
def get_recent_runs(user_id, limit=5):
    conn = sqlite3.connect('running.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT distance, date FROM runs 
        WHERE user_id = ? 
        ORDER BY date DESC 
        LIMIT ?
    ''', (user_id, limit))
    
    runs = cursor.fetchall()
    conn.close()
    
    return runs

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {username}! üèÉ‚Äç‚ôÇÔ∏è

–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–±–µ–≥–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Å–≤–æ–∏ –ø—Ä–æ–±–µ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 5 –∫–º
‚Ä¢ 10.5 –∫–º
‚Ä¢ 7,2 –∫–º

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/week - –ø—Ä–æ–±–µ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é
/stats - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∏
    """
    
    bot.reply_to(message, welcome_text)
    logger.info(f"User {user_id} started the bot")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week
@bot.message_handler(commands=['week'])
def show_weekly(message):
    user_id = message.from_user.id
    weekly_distance = get_weekly_distance(user_id)
    
    if weekly_distance > 0:
        text = f"üèÉ‚Äç‚ôÇÔ∏è –í–∞—à –ø—Ä–æ–±–µ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_distance:.1f} –∫–º"
    else:
        text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–≥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é. –ù–∞—á–Ω–∏—Ç–µ –±–µ–≥–∞—Ç—å!"
    
    bot.reply_to(message, text)
    logger.info(f"Weekly stats for user {user_id}: {weekly_distance}km")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def show_stats(message):
    user_id = message.from_user.id
    recent_runs = get_recent_runs(user_id)
    
    if recent_runs:
        text = "üìà –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∏:\n\n"
        for i, (distance, date) in enumerate(recent_runs, 1):
            text += f"{i}. {distance} –∫–º - {date}\n"
    else:
        text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–≥–æ–≤."
    
    bot.reply_to(message, text)
    logger.info(f"Stats shown for user {user_id}")

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        text = message.text.strip()
        
        logger.info(f"Received message from {user_id} ({username}): {text}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        km_match = re.search(r'(\d+[,.]?\d*)\s*–∫–º', text, re.IGNORECASE)
        if km_match:
            km_str = km_match.group(1).replace(',', '.')
            km = float(km_str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            add_run(user_id, username, km)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            weekly_distance = get_weekly_distance(user_id)
            
            response = f"""
‚úÖ –ü—Ä–æ–±–µ–≥ {km} –∫–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üèÉ‚Äç‚ôÇÔ∏è

üìä –í–∞—à –ø—Ä–æ–±–µ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_distance:.1f} –∫–º
            """
            
            bot.reply_to(message, response)
            logger.info(f"Run saved: user_id={user_id}, distance={km}km")
            
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–µ–≥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
            help_text = """
ü§î –Ø –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–æ–±–µ–≥ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 5 –∫–º
‚Ä¢ 10.5 –∫–º  
‚Ä¢ 7,2 –∫–º

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/week - –ø—Ä–æ–±–µ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é
/stats - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∏
            """
            bot.reply_to(message, help_text)
            
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∫–º –∏–ª–∏ 10.5 –∫–º")
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("Initializing database...")
    init_db()
    logger.info("Bot starting...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ –º—ã –≤–µ–±—Ö—É–∫ –∏–ª–∏ polling
    webhook_url = os.getenv('WEBHOOK_URL')
    
    if webhook_url:
        logger.info(f"Using webhook: {webhook_url}")
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        logger.info("Webhook set successfully")
    else:
        logger.info("Using polling...")
        bot.polling(none_stop=True, interval=2, timeout=60)
        logger.info("Polling started")
