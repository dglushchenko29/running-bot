import logging
import sqlite3
import re
import os
from datetime import datetime, timedelta
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            telegram_name TEXT,
            c95_name TEXT,
            c95_profile_url TEXT,
            club_id INTEGER,
            registered_at TEXT
        )
    ''')
    
    # –ö–ª—É–±—ã
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clubs (
            club_id INTEGER PRIMARY KEY,
            club_name TEXT,
            club_url TEXT
        )
    ''')
    
    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            workout_type TEXT NOT NULL,
            distance REAL NOT NULL,
            date TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–ª—É–±—ã
    clubs_data = [
        (1, "–ë–µ–≥–æ–≤–∞—è –±—Ä–∞—Ç–∏—è", "https://s95.ru/clubs/1"),
        (2, "–ú–∞—Ä–∞—Ñ–æ–Ω—Ü—ã", "https://s95.ru/clubs/2"),
        (3, "–°–ø—Ä–∏–Ω—Ç–µ—Ä—ã", "https://s95.ru/clubs/3"),
        (4, "–£–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω—Ü—ã", "https://s95.ru/clubs/4"),
        (5, "–õ—é–±–∏—Ç–µ–ª–∏", "https://s95.ru/clubs/5")
    ]
    
    cursor.executemany('''
        INSERT OR IGNORE INTO clubs (club_id, club_name, club_url)
        VALUES (?, ?, ?)
    ''', clubs_data)
    
    conn.commit()
    conn.close()

init_db()

def register_user(user_id, telegram_name, c95_name, c95_url, club_id):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    registered_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, telegram_name, c95_name, c95_profile_url, club_id, registered_at)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, telegram_name, c95_name, c95_url, club_id, registered_at))
    
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.*, c.club_name 
        FROM users u 
        LEFT JOIN clubs c ON u.club_id = c.club_id 
        WHERE u.user_id = ?
    ''', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def get_clubs():
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT club_id, club_name FROM clubs ORDER BY club_name')
    clubs = cursor.fetchall()
    conn.close()
    return clubs

def save_workout(user_id, workout_type, distance):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        INSERT INTO workouts (user_id, workout_type, distance, date)
        VALUES (?, ?, ?, ?)
    ''', (user_id, workout_type, distance, current_time))
    
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton("üìà –¢–æ–ø –º–µ—Å—è—Ü–∞"), KeyboardButton("üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
def start_bot(update, context):
    user = update.message.from_user
    user_data = get_user(user.id)
    
    if user_data:
        # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        message = f"üèÉ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data[2]}!\n\n"
        message += f"üë§ –ö–ª—É–±: {user_data[5] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        message = "üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –°95!\n\n"
        message += "üìä –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –±–µ–≥—É–Ω–∞–º–∏.\n\n"
        message += "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ 'üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'"
    
    update.message.reply_text(message, reply_markup=get_main_keyboard())

# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def start_registration(update, context):
    message = "üîó *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–µ–≥–æ–≤–æ–º –±–æ—Ç–µ*\n\n"
    message += "1. –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ s95.ru\n"
    message += "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://s95.ru/athletes/XXXXX\n"
    message += "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n"
    message += "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª—É–± –∏–∑ —Å–ø–∏—Å–∫–∞."
    
    update.message.reply_text(message, parse_mode='Markdown')
    context.user_data['registration_step'] = 'waiting_url'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if not text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_step = context.user_data.get('registration_step')
    
    if registration_step == 'waiting_url':
        # –ñ–¥–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –°95
        if 's95.ru/athletes/' in text:
            c95_url = text.strip()
            context.user_data['c95_url'] = c95_url
            context.user_data['registration_step'] = 'waiting_name'
            
            update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ –°95:")
        else:
            update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –°95. –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞: https://s95.ru/athletes/XXXXX")
    
    elif registration_step == 'waiting_name':
        # –ñ–¥–µ–º –∏–º—è
        c95_name = text.strip()
        context.user_data['c95_name'] = c95_name
        context.user_data['registration_step'] = 'waiting_club'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—É–±—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        clubs = get_clubs()
        keyboard = []
        for club_id, club_name in clubs:
            keyboard.append([InlineKeyboardButton(club_name, callback_data=f"club_{club_id}")])
        
        update.message.reply_text(
            "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\nüè¢ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª—É–±:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        handle_workout_message(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞
def handle_club_selection(update, context):
    query = update.callback_query
    user = query.from_user
    
    if query.data.startswith('club_'):
        club_id = int(query.data.split('_')[1])
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        c95_url = context.user_data.get('c95_url')
        c95_name = context.user_data.get('c95_name')
        
        if c95_url and c95_name:
            register_user(user.id, user.first_name, c95_name, c95_url, club_id)
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.clear()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞
            clubs = get_clubs()
            club_name = next((name for cid, name in clubs if cid == club_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—É–±")
            
            message = f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            message += f"üë§ *–ò–º—è:* {c95_name}\n"
            message += f"üè¢ *–ö–ª—É–±:* {club_name}\n"
            message += f"üîó *–ü—Ä–æ—Ñ–∏–ª—å:* {c95_url}\n\n"
            message += "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            message += "*10 –∫–º #—è–ø–æ–±–µ–≥–∞–ª*"
            
            query.edit_message_text(message, parse_mode='Markdown')
            query.message.reply_text("üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!", reply_markup=get_main_keyboard())
    
    query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def handle_workout_message(update, context):
    text = update.message.text
    user = update.message.from_user
    
    text_lower = text.lower()
    
    workout_type = None
    if '#—è–ø–æ–±–µ–≥–∞–ª' in text_lower:
        workout_type = 'run'
    elif '#—è–ø–æ–∫—Ä—É—Ç–∏–ª' in text_lower:
        workout_type = 'bike'
    elif '#—è–ø–æ–ø–ª–∞–≤–∞–ª' in text_lower:
        workout_type = 'swim'
    else:
        return
    
    matches = re.search(r'(\d+[.,]?\d*)\s*(–∫–º|km)', text, re.IGNORECASE)
    if matches:
        try:
            distance_str = matches.group(1).replace(',', '.')
            distance_km = float(distance_str)
            
            save_workout(user.id, workout_type, distance_km)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
            try:
                user_data = get_user(user.id)
                if user_data:
                    c95_name = user_data[2] or user.first_name
                else:
                    c95_name = user.first_name
                
                user.send_message(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\nüèÉ‚Äç‚ôÇÔ∏è –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_km} –∫–º\nüë§ –û—Ç –∏–º–µ–Ω–∏: {c95_name}")
            except:
                update.message.reply_text("‚úÖ", reply_to_message_id=update.message.message_id)
            
        except ValueError:
            pass

# –ö–Ω–æ–ø–∫–∞ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
def show_my_stats(update, context):
    user = update.message.from_user
    user_data = get_user(user.id)
    
    if not user_data:
        update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=get_main_keyboard())
        return
    
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    since_date_week = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance) FROM workouts WHERE user_id = ? AND date > ?', (user.id, since_date_week))
    week_stats = cursor.fetchone()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    since_date_month = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance) FROM workouts WHERE user_id = ? AND date > ?', (user.id, since_date_month))
    month_stats = cursor.fetchone()
    
    conn.close()
    
    c95_name, c95_url, club_name = user_data[2], user_data[3], user_data[5]
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {c95_name}*\n\n"
    message += f"üè¢ *–ö–ª—É–±:* {club_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    
    if week_stats and week_stats[0]:
        message += f"\nüìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
        message += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {week_stats[0]}\n"
        message += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {week_stats[1]:.1f} –∫–º\n"
    
    if month_stats and month_stats[0]:
        message += f"\nüìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
        message += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {month_stats[0]}\n"
        message += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats[1]:.1f} –∫–º\n"
    
    if not week_stats[0] and not month_stats[0]:
        message += f"\nüì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ: *5 –∫–º #—è–ø–æ–±–µ–≥–∞–ª*"
    
    update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–ø–∞
def get_top_workouts(days=7):
    conn = sqlite3.connect('running_bot.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        SELECT u.c95_name, u.c95_profile_url, c.club_name, SUM(w.distance) as total_distance
        FROM workouts w
        JOIN users u ON w.user_id = u.user_id
        LEFT JOIN clubs c ON u.club_id = c.club_id
        WHERE w.date > ?
        GROUP BY u.user_id
        ORDER BY total_distance DESC
        LIMIT 10
    ''', (since_date,))
    
    top_list = cursor.fetchall()
    conn.close()
    return top_list

def show_top_week(update, context):
    top_list = get_top_workouts(7)
    send_top_message(update, top_list, "–Ω–µ–¥–µ–ª—é")

def show_top_month(update, context):
    top_list = get_top_workouts(30)
    send_top_message(update, top_list, "–º–µ—Å—è—Ü")

def send_top_message(update, top_list, period_name):
    if not top_list:
        update.message.reply_text(f"üèÜ –ó–∞ {period_name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_keyboard())
        return
        
    message = f"üèÜ *–¢–û–ü –∑–∞ {period_name}:*\n\n"
    
    for i, (c95_name, c95_url, club_name, total_distance) in enumerate(top_list, 1):
        if c95_url:
            message += f"{i}. [{c95_name}]({c95_url}): {total_distance:.1f} –∫–º\n"
            if club_name:
                message += f"   üè¢ {club_name}\n"
        else:
            message += f"{i}. {c95_name}: {total_distance:.1f} –∫–º\n"
            if club_name:
                message += f"   üè¢ {club_name}\n"
        message += "\n"
    
    update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_main_keyboard())

def main():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start_bot))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.text("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), show_my_stats))
    dispatcher.add_handler(MessageHandler(Filters.text("üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏"), show_top_week))
    dispatcher.add_handler(MessageHandler(Filters.text("üìà –¢–æ–ø –º–µ—Å—è—Ü–∞"), show_top_month))
    dispatcher.add_handler(MessageHandler(Filters.text("üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), start_registration))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    dispatcher.add_handler(CallbackQueryHandler(handle_club_selection, pattern='^club_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏)")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
