import logging
import sqlite3
import re
import os
from datetime import datetime, timedelta
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –°95)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            telegram_name TEXT,
            c95_name TEXT,
            c95_profile_url TEXT,
            registered_at TEXT
        )
    ''')
    
    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            workout_type TEXT NOT NULL,
            distance REAL NOT NULL,
            date TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, telegram_name, c95_name, c95_url):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    registered_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, telegram_name, c95_name, c95_profile_url, registered_at)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, telegram_name, c95_name, c95_url, registered_at))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
def save_workout(user_id, workout_type, distance):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        INSERT INTO workouts (user_id, workout_type, distance, date)
        VALUES (?, ?, ?, ?)
    ''', (user_id, workout_type, distance, current_time))
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def start_registration(update, context):
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if context.args:
        c95_url = context.args[0]
        if 's95.ru/athletes/' in c95_url:
            # –ü–∞—Ä—Å–∏–º –∏–º—è –∏–∑ URL –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
            update.message.reply_text(
                f"üîó –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –°95: {c95_url}\n"
                f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ –°95:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
            )
            context.user_data['pending_registration'] = {'url': c95_url}
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ - –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å
    update.message.reply_text(
        "üèÉ‚Äç‚ôÇÔ∏è *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–µ–≥–æ–≤–æ–º –±–æ—Ç–µ –°95*\n\n"
        "1. –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ s95.ru\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://s95.ru/athletes/12345\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/register https://s95.ru/athletes/–≤–∞—à_–Ω–æ–º–µ—Ä",
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –°95
def handle_c95_link(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if 's95.ru/athletes/' in text:
        # –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –°95
        c95_url = text.strip()
        
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
        update.message.reply_text(
            f"üîó –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –°95!\n"
            f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ:"
        )
        context.user_data['pending_registration'] = {'url': c95_url}
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        try:
            update.message.delete()
        except:
            pass

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def complete_registration(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if 'pending_registration' in context.user_data:
        c95_url = context.user_data['pending_registration']['url']
        c95_name = text.strip()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        register_user(user.id, user.first_name, c95_name, c95_url)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        del context.user_data['pending_registration']
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        update.message.reply_text(
            f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"üë§ *–ò–º—è:* {c95_name}\n"
            f"üîó *–ü—Ä–æ—Ñ–∏–ª—å:* [—Å—Å—ã–ª–∫–∞]({c95_url})\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"*10 –∫–º #—è–ø–æ–±–µ–≥–∞–ª*\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/top_week - —Ç–æ–ø –Ω–µ–¥–µ–ª–∏\n"
            f"/top_month - —Ç–æ–ø –º–µ—Å—è—Ü–∞",
            parse_mode='Markdown'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def handle_workout_message(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if not text:
        return
    
    # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if 'pending_registration' in context.user_data:
        complete_registration(update, context)
        return
    
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    workout_type = None
    if '#—è–ø–æ–±–µ–≥–∞–ª' in text_lower:
        workout_type = 'run'
    elif '#—è–ø–æ–∫—Ä—É—Ç–∏–ª' in text_lower:
        workout_type = 'bike'
    elif '#—è–ø–æ–ø–ª–∞–≤–∞–ª' in text_lower:
        workout_type = 'swim'
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—Å—ã–ª–∫—É –ª–∏ –Ω–∞ –°95 –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
        if 's95.ru/athletes/' in text:
            handle_c95_link(update, context)
        return
    
    # –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    matches = re.search(r'(\d+[.,]?\d*)\s*(–∫–º|km)', text, re.IGNORECASE)
    if matches:
        try:
            distance_str = matches.group(1).replace(',', '.')
            distance_km = float(distance_str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            save_workout(user.id, workout_type, distance_km)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
            try:
                user_data = get_user(user.id)
                if user_data:
                    c95_name = user_data[2] or user.first_name
                    c95_url = user_data[3]
                else:
                    c95_name = user.first_name
                    c95_url = None
                
                message = f"‚úÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!*\n\nüèÉ‚Äç‚ôÇÔ∏è *–î–∏—Å—Ç–∞–Ω—Ü–∏—è:* {distance_km} –∫–º\nüë§ *–û—Ç –∏–º–µ–Ω–∏:* {c95_name}"
                
                if c95_url:
                    message += f"\nüîó *–ü—Ä–æ—Ñ–∏–ª—å:* [–°95]({c95_url})"
                
                user.send_message(message, parse_mode='Markdown')
            except:
                # Fallback - –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ
                update.message.reply_text("‚úÖ", reply_to_message_id=update.message.message_id)
            
        except ValueError:
            pass

# –¢–æ–ø —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
def get_top_workouts(days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        SELECT u.user_id, u.c95_name, u.c95_profile_url, SUM(w.distance) as total_distance
        FROM workouts w
        JOIN users u ON w.user_id = u.user_id
        WHERE w.date > ?
        GROUP BY u.user_id
        ORDER BY total_distance DESC
        LIMIT 10
    ''', (since_date,))
    
    top_list = cursor.fetchall()
    conn.close()
    return top_list

# –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ø–∞ –Ω–µ–¥–µ–ª–∏
def top_week(update, context):
    top_list = get_top_workouts(7)
    send_top_message(update, top_list, "–Ω–µ–¥–µ–ª—é")

# –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞
def top_month(update, context):
    top_list = get_top_workouts(30)
    send_top_message(update, top_list, "–º–µ—Å—è—Ü")

def send_top_message(update, top_list, period_name):
    if not top_list:
        update.message.reply_text(f"üèÜ –ó–∞ {period_name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
        
    message = f"üèÜ *–¢–û–ü –∑–∞ {period_name}:*\n\n"
    
    for i, (user_id, c95_name, c95_url, total_distance) in enumerate(top_list, 1):
        if c95_url and c95_name:
            # –° –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
            message += f"{i}. [{c95_name}]({c95_url}): {total_distance:.1f} –∫–º\n"
        else:
            # –ë–µ–∑ —Å—Å—ã–ª–∫–∏
            user_data = get_user(user_id)
            name = c95_name or (user_data[1] if user_data else f"–£—á–∞—Å—Ç–Ω–∏–∫ {user_id}")
            message += f"{i}. {name}: {total_distance:.1f} –∫–º\n"
    
    update.message.reply_text(message, parse_mode='Markdown')

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_stats(update, context):
    user = update.message.from_user
    user_data = get_user(user.id)
    
    if not user_data:
        update.message.reply_text("üìã –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /register")
        return
    
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    since_date_week = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance) FROM workouts WHERE user_id = ? AND date > ?', (user.id, since_date_week))
    week_stats = cursor.fetchone()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    since_date_month = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance) FROM workouts WHERE user_id = ? AND date > ?', (user.id, since_date_month))
    month_stats = cursor.fetchone()
    
    conn.close()
    
    c95_name, c95_url = user_data[2], user_data[3]
    
    message = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
    message += f"üë§ *–ò–º—è:* {c95_name}\n"
    if c95_url:
        message += f"üîó *–ü—Ä–æ—Ñ–∏–ª—å:* [–°95]({c95_url})\n"
    
    if week_stats and week_stats[0]:
        message += f"\nüìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
        message += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {week_stats[0]}\n"
        message += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {week_stats[1]:.1f} –∫–º\n"
    
    if month_stats and month_stats[0]:
        message += f"\nüìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
        message += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {month_stats[0]}\n"
        message += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats[1]:.1f} –∫–º\n"
    
    if not week_stats[0] and not month_stats[0]:
        message += f"\nüì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ: *5 –∫–º #—è–ø–æ–±–µ–≥–∞–ª*"
    
    update.message.reply_text(message, parse_mode='Markdown')

def main():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start_registration))
    dispatcher.add_handler(CommandHandler("register", start_registration))
    dispatcher.add_handler(CommandHandler("stats", user_stats))
    dispatcher.add_handler(CommandHandler("top_week", top_week))
    dispatcher.add_handler(CommandHandler("top_month", top_month))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_workout_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... (–°95 –≤–µ—Ä—Å–∏—è)")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
