import logging
import sqlite3
import re
import os
from datetime import datetime, timedelta
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            user_name TEXT,
            workout_type TEXT NOT NULL,
            distance REAL NOT NULL,
            date TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_workout(user_id, user_name, workout_type, distance):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
        INSERT INTO workouts (user_id, user_name, workout_type, distance, date)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, user_name, workout_type, distance, current_time))
    conn.commit()
    conn.close()

def get_user_stats(user_id, days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance), AVG(distance) FROM workouts WHERE user_id = ? AND date > ?', (user_id, since_date))
    stats = cursor.fetchone()
    conn.close()
    return stats

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
def send_private_message(user, text):
    try:
        user.send_message(text)
        return True
    except:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é –∏ –ø–∏—à–µ—Ç –≤ –õ–°
def handle_workout_message(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if not text:
        return
    
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    workout_type = None
    emoji = "üî•"
    if '#—è–ø–æ–±–µ–≥–∞–ª' in text_lower:
        workout_type = 'run'
        emoji = "üèÉ‚Äç‚ôÇÔ∏è"
    elif '#—è–ø–æ–∫—Ä—É—Ç–∏–ª' in text_lower:
        workout_type = 'bike'
        emoji = "üö¥‚Äç‚ôÇÔ∏è"
    elif '#—è–ø–æ–ø–ª–∞–≤–∞–ª' in text_lower:
        workout_type = 'swim'
        emoji = "üèä‚Äç‚ôÇÔ∏è"
    else:
        return
    
    # –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    matches = re.search(r'(\d+[.,]?\d*)\s*(–∫–º|km)', text, re.IGNORECASE)
    if matches:
        try:
            distance_str = matches.group(1).replace(',', '.')
            distance_km = float(distance_str)
            
            user_name = user.first_name or user.username or "–ê–Ω–æ–Ω–∏–º"
            save_workout(user.id, user_name, workout_type, distance_km)
            
            # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é (–≤—Å–µ–º –≤–∏–¥–Ω–æ –≤ —á–∞—Ç–µ)
            try:
                update.message.reply_text(emoji)
            except:
                pass
            
            # –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
            private_msg = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {distance_km} –∫–º!\n\n–ö–æ–º–∞–Ω–¥—ã:\n/stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/top_week - —Ç–æ–ø –Ω–µ–¥–µ–ª–∏\n/top_month - —Ç–æ–ø –º–µ—Å—è—Ü–∞"
            send_private_message(user, private_msg)
            
        except ValueError:
            pass

# –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≤–∞—Ç–Ω–∞—è
def stats_command(update, context):
    user = update.message.from_user
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
    try:
        update.message.delete()
    except:
        pass
    
    stats_week = get_user_stats(user.id, 7)
    stats_month = get_user_stats(user.id, 30)
    
    if not stats_week or not stats_week[0]:
        send_private_message(user, "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return
    
    wk_workouts, wk_total, wk_avg = stats_week
    mn_workouts, mn_total, mn_avg = stats_month
    
    message = f"üèÉ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    message += f"üìÖ –ù–µ–¥–µ–ª—è: {wk_workouts} –ø—Ä–æ–±–µ–∂–µ–∫, {wk_total:.1f} –∫–º\n"
    message += f"üìÖ –ú–µ—Å—è—Ü: {mn_workouts} –ø—Ä–æ–±–µ–∂–µ–∫, {mn_total:.1f} –∫–º\n\n"
    message += "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ: 5 –∫–º #—è–ø–æ–±–µ–≥–∞–ª"
    
    send_private_message(user, message)

# –ö–æ–º–∞–Ω–¥–∞ /top_week - –ø—É–±–ª–∏—á–Ω—ã–π —Ç–æ–ø
def top_week_command(update, context):
    user = update.message.from_user
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
    try:
        update.message.delete()
    except:
        pass
    
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT user_name, SUM(distance) FROM workouts WHERE date > ? GROUP BY user_id ORDER BY SUM(distance) DESC LIMIT 10', (since_date,))
    top_list = cursor.fetchall()
    conn.close()
    
    if not top_list:
        send_private_message(user, "üèÜ –ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
        
    message = "üèÜ –¢–û–ü –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for i, (user_name, distance) in enumerate(top_list, 1):
        message += f"{i}. {user_name}: {distance:.1f} –∫–º\n"
    
    # –¢–æ–ø –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç (–ø—É–±–ª–∏—á–Ω–æ)
    try:
        update.message.reply_text(message)
    except:
        send_private_message(user, message)

# –ö–æ–º–∞–Ω–¥–∞ /top_month - –ø—É–±–ª–∏—á–Ω—ã–π —Ç–æ–ø
def top_month_command(update, context):
    user = update.message.from_user
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
    try:
        update.message.delete()
    except:
        pass
    
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT user_name, SUM(distance) FROM workouts WHERE date > ? GROUP BY user_id ORDER BY SUM(distance) DESC LIMIT 10', (since_date,))
    top_list = cursor.fetchall()
    conn.close()
    
    if not top_list:
        send_private_message(user, "üèÜ –ó–∞ –º–µ—Å—è—Ü –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
        
    message = "üèÜ –¢–û–ü –∑–∞ –º–µ—Å—è—Ü:\n"
    for i, (user_name, distance) in enumerate(top_list, 1):
        message += f"{i}. {user_name}: {distance:.1f} –∫–º\n"
    
    # –¢–æ–ø –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç (–ø—É–±–ª–∏—á–Ω–æ)
    try:
        update.message.reply_text(message)
    except:
        send_private_message(user, message)

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
def start_command(update, context):
    user = update.message.from_user
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
    try:
        update.message.delete()
    except:
        pass
    
    message = "üèÉ –ë–µ–≥–æ–≤–æ–π –±–æ—Ç\n\n"
    message += "üìù –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç:\n"
    message += "5 –∫–º #—è–ø–æ–±–µ–≥–∞–ª - –¥–ª—è –±–µ–≥–∞\n"
    message += "20 –∫–º #—è–ø–æ–∫—Ä—É—Ç–∏–ª - –¥–ª—è –≤–µ–ª–æ\n"
    message += "1 –∫–º #—è–ø–æ–ø–ª–∞–≤–∞–ª - –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è\n\n"
    message += "üìä –ö–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ):\n"
    message += "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    message += "/top_week - —Ç–æ–ø –Ω–µ–¥–µ–ª–∏ (–ø—É–±–ª–∏—á–Ω—ã–π)\n"
    message += "/top_month - —Ç–æ–ø –º–µ—Å—è—Ü–∞ (–ø—É–±–ª–∏—á–Ω—ã–π)\n\n"
    message += "üî• –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    
    send_private_message(user, message)

def main():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("stats", stats_command))
    dispatcher.add_handler(CommandHandler("top_week", top_week_command))
    dispatcher.add_handler(CommandHandler("top_month", top_month_command))
    dispatcher.add_handler(CommandHandler("help", start_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_workout_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
