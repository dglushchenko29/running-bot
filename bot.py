import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = "8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds"

# –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            user_name TEXT,
            workout_type TEXT NOT NULL, -- 'run', 'bike', 'swim'
            distance REAL NOT NULL, -- –î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –∫–º
            date TEXT NOT NULL -- –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
        )
    ''')
    conn.commit()
    conn.close()

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()
def save_workout(user_id, user_name, workout_type, distance):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        INSERT INTO workouts (user_id, user_name, workout_type, distance, date)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, user_name, workout_type, distance, current_time))
    
    conn.commit()
    conn.close()
async def handle_photo_with_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    caption = message.caption # –≠—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ñ–æ—Ç–æ

    if not caption:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
    caption_lower = caption.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ç–µ–≥–∞–º
    workout_type = None
    if '#—è–ø–æ–±–µ–≥–∞–ª' in caption_lower:
        workout_type = 'run'
    elif '#—è–ø–æ–∫—Ä—É—Ç–∏–ª' in caption_lower:
        workout_type = 'bike'
    elif '#—è–ø–æ–ø–ª–∞–≤–∞–ª' in caption_lower:
        workout_type = 'swim'

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã—Ö–æ–¥–∏–º
    if not workout_type:
        return

    # –ò—â–µ–º —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ), –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    import re
    # –®–∞–±–ª–æ–Ω –∏—â–µ—Ç —á–∏—Å–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π, –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (km, –∫–º)
    distance_pattern = r'(\d+[.,]?\d*)\s*(–∫–º|km|–ö–ú)'
    matches = re.search(distance_pattern, caption)

    if matches:
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            distance_str = matches.group(1).replace(',', '.')
            distance_km = float(distance_str)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user_name = user.first_name or user.username or "–ê–Ω–æ–Ω–∏–º"
            save_workout(user.id, user_name, workout_type, distance_km)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
            await message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! {distance_km} –∫–º ({workout_type})")
            
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
            await message.reply_text("‚ùå –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '10 –∫–º'.")
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —à–∞–±–ª–æ–Ω —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π
        await message.reply_text("‚ùå –ù–µ –≤–∏–∂—É –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ '5 –∫–º' –∏–ª–∏ '10.5 km'.")
def get_top_workouts(workout_type=None, days=7):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ days –¥–Ω–µ–π"""
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    
    # –°—Ç—Ä–æ–∏–º SQL-–∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω—É–∂–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if workout_type:
        cursor.execute('''
            SELECT user_name, SUM(distance) as total_distance
            FROM workouts
            WHERE date > ? AND workout_type = ?
            GROUP BY user_id
            ORDER BY total_distance DESC
            LIMIT 10
        ''', (since_date, workout_type))
    else:
        cursor.execute('''
            SELECT user_name, SUM(distance) as total_distance
            FROM workouts
            WHERE date > ?
            GROUP BY user_id
            ORDER BY total_distance DESC
            LIMIT 10
        ''', (since_date,))
    
    top_list = cursor.fetchall()
    conn.close()
    return top_list

async def top_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top_week"""
    top_list = get_top_workouts(days=7)
    await send_top_message(update, top_list, "–Ω–µ–¥–µ–ª—é")

async def top_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top_month"""
    top_list = get_top_workouts(days=30)
    await send_top_message(update, top_list, "–º–µ—Å—è—Ü")

async def send_top_message(update, top_list, period_name):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø–∞"""
    if not top_list:
        await update.message.reply_text(f"üèÜ –ó–∞ {period_name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.")
        return

    message_text = f"üèÜ –¢–û–ü-10 –∑–∞ {period_name}:\n\n"
    for i, (user_name, total_distance) in enumerate(top_list, 1):
        message_text += f"{i}. {user_name}: {total_distance:.1f} –∫–º\n"

    await update.message.reply_text(message_text)
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é
    application.add_handler(MessageHandler(filters.PHOTO & filters.CaptionRegex(r".*"), handle_photo_with_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("top_week", top_week))
    application.add_handler(CommandHandler("top_month", top_month))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == '__main__':
    main()
