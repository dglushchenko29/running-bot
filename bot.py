import os
import logging
import re
from datetime import datetime
from typing import Optional

from telegram import (
    Update, 
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    MenuButtonCommands
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes, 
    filters,
    ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class RunningBot:
    def __init__(self, token: str, db: Database):
        self.token = token
        self.db = db
        self.application = Application.builder().token(token).build()
        self.scheduler = AsyncIOScheduler()
        
        self._setup_handlers()
        self._setup_scheduler()
    
    def _setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
        self.application.add_handler(CommandHandler("start", self._start))
        self.application.add_handler(CommandHandler("stats", self._stats))
        self.application.add_handler(CommandHandler("top_week", self._top_week))
        self.application.add_handler(CommandHandler("top_month", self._top_month))
        self.application.add_handler(CommandHandler("help", self._help))
        self.application.add_handler(CommandHandler("add_runner", self._add_runner))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ #—è–ø–æ–±–µ–≥–∞–ª)
        self.application.add_handler(MessageHandler(
            filters.ChatType.GROUPS & filters.TEXT, 
            self._handle_group_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–°
        self.application.add_handler(MessageHandler(
            filters.ChatType.PRIVATE & filters.TEXT, 
            self._handle_private_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–≥–¥–∞ –±–æ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É
        self.application.add_handler(MessageHandler(
            filters.StatusUpdate.NEW_CHAT_MEMBERS,
            self._handle_bot_added_to_group
        ))
    
    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        # –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
        self.scheduler.add_job(
            self._send_weekly_stats,
            CronTrigger(day_of_week=0, hour=10, minute=0),  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            id='weekly_stats'
        )
        
        # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 10:00
        self.scheduler.add_job(
            self._send_monthly_stats,
            CronTrigger(day=1, hour=10, minute=0),
            id='monthly_stats'
        )
    
    async def _setup_menu_buttons(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
            BotCommand("stats", "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("top_week", "–¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é"),
            BotCommand("top_month", "–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("add_runner", "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É")
        ]
        
        await application.bot.set_my_commands(commands)
        await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    
    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        self.db.add_user(user.id, user.first_name, user.last_name, user.username)
        
        if chat.type == "private":
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –õ–°
            keyboard = [
                ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏"],
                ["üìà –¢–æ–ø –º–µ—Å—è—Ü–∞", "‚ùì –ü–æ–º–æ—â—å"],
                ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"üèÉ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–±–µ–∂–µ–∫ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
                "üì± –í –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–Ø–•:\n"
                "‚Ä¢ –°–º–æ—Ç—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "‚Ä¢ –°–º–æ—Ç—Ä–∏ —Ç–æ–ø—ã –∑–∞ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è–π –ø—Ä–æ–±–µ–∂–∫–∏\n\n"
                "üí¨ –í –ì–†–£–ü–ü–û–í–û–ú –ß–ê–¢–ï:\n"
                "‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É' –≤ –º–µ–Ω—é\n"
                "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ: #—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n"
                "‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—à—É —Ç–≤–æ—é –ø—Ä–æ–±–µ–∂–∫—É!\n\n"
                "üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
                "‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 - —Ç–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ 1-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ - —Ç–æ–ø –∑–∞ –º–µ—Å—è—Ü",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–æ–±–µ–∂–∫–∏ "
                "–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö–µ—à—Ç–µ–≥–æ–º #—è–ø–æ–±–µ–≥–∞–ª\n\n"
                "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É' –≤ –º–µ–Ω—é –±–æ—Ç–∞\n"
                "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: #—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
                "–î–ª—è –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°!"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            self.db.add_chat(chat.id, chat.title)
    
    async def _add_runner(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã add_runner - –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã"""
        chat = update.effective_chat
        
        if chat.type == "private":
            await update.message.reply_text(
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
            )
        else:
            await update.message.reply_text(
                "üèÉ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É:\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
            )
    
    async def _button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user = query.from_user
        
        if data == "my_stats":
            await self._show_user_stats(query, user)
        elif data == "top_week":
            await self._show_top_week(query)
        elif data == "top_month":
            await self._show_top_month(query)
        elif data == "add_run":
            await self._show_add_run_help(query)
    
    async def _show_user_stats(self, query, user):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = self.db.get_user_stats(user.id)
        
        if stats['total_runs'] == 0:
            await query.edit_message_text(
                "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫.\n\n"
                "–î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é –ø—Ä–æ–±–µ–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∏–≤ –≤ –≥—Ä—É–ø–ø–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–° —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
            )
        else:
            await query.edit_message_text(
                f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üèÉ –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {stats['total_runs']}\n"
                f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_distance']:.1f} –∫–º\n"
                f"üìà –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['average_distance']:.1f} –∫–º\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
            )
    
    async def _show_top_week(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é"""
        stats = self.db.get_week_stats()
        await self._send_top_to_query(query, stats, "–Ω–µ–¥–µ–ª—é")
    
    async def _show_top_month(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞ –º–µ—Å—è—Ü"""
        stats = self.db.get_month_stats()
        await self._send_top_to_query(query, stats, "–º–µ—Å—è—Ü")
    
    async def _send_top_to_query(self, query, stats, period):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ø –≤ callback query"""
        if not stats:
            await query.edit_message_text(f"üì≠ –ó–∞ —ç—Ç—É {period} –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫")
            return
        
        text = f"üèÜ –¢–û–ü –±–µ–≥—É–Ω–æ–≤ –∑–∞ {period}:\n\n"
        
        for i, runner in enumerate(stats[:10], 1):
            username = f"@{runner['username']}" if runner['username'] else runner['first_name']
            text += f"{i}. {username} - {runner['total_distance']:.1f} –∫–º ({runner['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫)\n"
        
        await query.edit_message_text(text)
    
    async def _show_add_run_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–µ–∂–∫–∏"""
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É:\n\n"
            "–í –ì–†–£–ü–ü–ï:\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
            "–í –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–Ø–•:\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ #—è–ø–æ–±–µ–≥–∞–ª 5 –∫–º\n"
            "‚Ä¢ #—è–ø–æ–±–µ–≥–∞–ª 10.5–∫–º\n"
            "‚Ä¢ #—è–ø–æ–±–µ–≥–∞–ª 7.2 –∫–º"
        )
    
    async def _stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user = update.effective_user
        chat = update.effective_chat
        
        if chat.type != "private":
            await update.message.reply_text(
                "üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
            )
            return
        
        stats = self.db.get_user_stats(user.id)
        
        if stats['total_runs'] == 0:
            await update.message.reply_text(
                "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫.\n\n"
                "–î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é –ø—Ä–æ–±–µ–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∏–≤ –≤ –≥—Ä—É–ø–ø–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–° —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
            )
        else:
            await update.message.reply_text(
                f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üèÉ –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {stats['total_runs']}\n"
                f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_distance']:.1f} –∫–º\n"
                f"üìà –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['average_distance']:.1f} –∫–º\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
            )
    
    async def _top_week(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é"""
        chat = update.effective_chat
        
        if chat.type != "private":
            await update.message.reply_text(
                "üìà –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
            )
            return
        
        stats = self.db.get_week_stats()
        await self._send_top_list(update, stats, "–Ω–µ–¥–µ–ª—é")
    
    async def _top_month(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü"""
        chat = update.effective_chat
        
        if chat.type != "private":
            await update.message.reply_text(
                "üìà –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
            )
            return
        
        stats = self.db.get_month_stats()
        await self._send_top_list(update, stats, "–º–µ—Å—è—Ü")
    
    async def _send_top_list(self, update: Update, stats: list, period: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø–∞"""
        if not stats:
            await update.message.reply_text(f"üì≠ –ó–∞ —ç—Ç–æ—Ç {period} –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫")
            return
        
        text = f"üèÜ –¢–û–ü –±–µ–≥—É–Ω–æ–≤ –∑–∞ {period}:\n\n"
        
        for i, runner in enumerate(stats[:10], 1):
            username = f"@{runner['username']}" if runner['username'] else runner['first_name']
            text += f"{i}. {username} - {runner['total_distance']:.1f} –∫–º ({runner['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫)\n"
        
        await update.message.reply_text(text)
    
    async def _help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å"""
        await update.message.reply_text(
            "üèÉ –ü–æ–º–æ—â—å –ø–æ –±–µ–≥–æ–≤–æ–º—É –±–æ—Ç—É:\n\n"
            "–í –ì–†–£–ü–ü–ï:\n"
            "‚Ä¢ –ù–∞–∂–º–∏ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É' –≤ –º–µ–Ω—é –±–æ—Ç–∞\n"
            "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å: #—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
            "–í –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–Ø–•:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n"
            "‚Ä¢ –ò–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/top_week - —Ç–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "/top_month - —Ç–æ–ø –∑–∞ –º–µ—Å—è—Ü\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
            "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 - —Ç–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "‚Ä¢ 1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ 10:00 - —Ç–æ–ø –∑–∞ –º–µ—Å—è—Ü"
        )
    
    async def _handle_group_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö - –ø–∞—Ä—Å–∏–Ω–≥ #—è–ø–æ–±–µ–≥–∞–ª"""
        message = update.message
        text = message.text
        
        if not text or '#—è–ø–æ–±–µ–≥–∞–ª' not in text.lower():
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        distance = self._parse_distance_from_text(text)
        
        if distance:
            user = message.from_user
            self.db.add_user(user.id, user.first_name, user.last_name, user.username)
            self.db.add_run(user.id, distance)
            
            logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–±–µ–∂–∫–∞: {user.first_name} - {distance} –∫–º")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                stats = self.db.get_user_stats(user.id)
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"‚úÖ –ü—Ä–æ–±–µ–∂–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
                         f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∫–º\n"
                         f"–í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {stats['total_runs']}\n"
                         f"–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_distance']:.1f} –∫–º\n\n"
                         f"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
    
    async def _handle_private_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–°"""
        message = update.message
        text = message.text
        user = message.from_user
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self._stats(update, context)
        elif text == "üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏":
            await self._top_week(update, context)
        elif text == "üìà –¢–æ–ø –º–µ—Å—è—Ü–∞":
            await self._top_month(update, context)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self._help(update, context)
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É":
            await message.reply_text(
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
            )
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç #—è–ø–æ–±–µ–≥–∞–ª, –ø–∞—Ä—Å–∏–º –µ–≥–æ
        elif text and '#—è–ø–æ–±–µ–≥–∞–ª' in text.lower():
            distance = self._parse_distance_from_text(text)
            if distance:
                self.db.add_user(user.id, user.first_name, user.last_name, user.username)
                self.db.add_run(user.id, distance)
                
                stats = self.db.get_user_stats(user.id)
                await message.reply_text(
                    f"‚úÖ –ü—Ä–æ–±–µ–∂–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∫–º\n"
                    f"–í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {stats['total_runs']}\n"
                    f"–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_distance']:.1f} –∫–º\n\n"
                    f"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"
                )
            else:
                await message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.\n"
                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: #—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n"
                    "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: #—è–ø–æ–±–µ–≥–∞–ª 10 –∫–º"
                )
        elif text and not text.startswith('/'):
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
            await message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–±–µ–∂–∫–æ–π:\n"
                "#—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º"
            )
    
    async def _handle_bot_added_to_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
        chat = update.effective_chat
        new_members = update.message.new_chat_members
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        bot_id = context.bot.id
        if any(member.id == bot_id for member in new_members):
            self.db.add_chat(chat.id, chat.title)
            
            await update.message.reply_text(
                "‚úÖ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–±–µ–∂–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É' –≤ –º–µ–Ω—é –±–æ—Ç–∞\n"
                "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: #—è–ø–æ–±–µ–≥–∞–ª 5.2–∫–º\n"
                "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—à–µ—Ç –ø—Ä–æ–±–µ–∂–∫—É\n"
                "4. –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°\n\n"
                "–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é!"
            )
    
    async def _send_weekly_stats(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        stats = self.db.get_week_stats()
        if not stats:
            return
        
        text = "üèÜ –¢–û–ü –±–µ–≥—É–Ω–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        
        for i, runner in enumerate(stats[:10], 1):
            username = f"@{runner['username']}" if runner['username'] else runner['first_name']
            text += f"{i}. {username} - {runner['total_distance']:.1f} –∫–º ({runner['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫)\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in self.db.get_chats():
            try:
                await self.application.bot.send_message(chat_id=chat_id, text=text)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å weekly stats –≤ —á–∞—Ç {chat_id}: {e}")
    
    async def _send_monthly_stats(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø–∞ –∑–∞ –º–µ—Å—è—Ü"""
        stats = self.db.get_month_stats()
        if not stats:
            return
        
        text = "üèÜ –¢–û–ü –±–µ–≥—É–Ω–æ–≤ –∑–∞ –º–µ—Å—è—Ü:\n\n"
        
        for i, runner in enumerate(stats[:10], 1):
            username = f"@{runner['username']}" if runner['username'] else runner['first_name']
            text += f"{i}. {username} - {runner['total_distance']:.1f} –∫–º ({runner['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫)\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in self.db.get_chats():
            try:
                await self.application.bot.send_message(chat_id=chat_id, text=text)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å monthly stats –≤ —á–∞—Ç {chat_id}: {e}")
    
    def _parse_distance_from_text(self, text: str) -> Optional[float]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ —Ö–µ—à—Ç–µ–≥–∞
            text = text.lower().replace('#—è–ø–æ–±–µ–≥–∞–ª', '').strip()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã –∏ –Ω–µ-—Ç–æ—á–∫–∏, –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤
            clean_text = re.sub(r'[^\d\s.,]', '', text)
            
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
            match = re.search(r'(\d+[.,]?\d*)', clean_text)
            if match:
                number_str = match.group(1).replace(',', '.')
                distance = float(number_str)
                return distance if distance > 0 else None
        except (ValueError, AttributeError):
            pass
        
        return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.application.post_init = self._setup_menu_buttons
        
        self.scheduler.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 (–Ω–µ–¥–µ–ª—è), 1 —á–∏—Å–ª–æ 10:00 (–º–µ—Å—è—Ü)")
        self.application.run_polling()
