import logging
import sqlite3
import re
import os
from datetime import datetime, timedelta
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            user_name TEXT,
            workout_type TEXT NOT NULL,
            distance REAL NOT NULL,
            date TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_workout(user_id, user_name, workout_type, distance):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
        INSERT INTO workouts (user_id, user_name, workout_type, distance, date)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, user_name, workout_type, distance, current_time))
    conn.commit()
    conn.close()

# –ú–µ–Ω—é
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üèÉ –ú–æ–π –ø—Ä–æ–±–µ–≥"), KeyboardButton("üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton("üìä –¢–æ–ø –º–µ—Å—è—Ü–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update, context):
    update.message.reply_text(
        "üèÉ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_stats(user_id, days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute('''
        SELECT 
            COUNT(*) as workouts_count,
            SUM(distance) as total_distance,
            AVG(distance) as avg_distance
        FROM workouts 
        WHERE user_id = ? AND date > ?
    ''', (user_id, since_date))
    
    stats = cursor.fetchone()
    
    cursor.execute('''
        SELECT workout_type, SUM(distance) as distance
        FROM workouts 
        WHERE user_id = ? AND date > ?
        GROUP BY workout_type
    ''', (user_id, since_date))
    
    workout_types = cursor.fetchall()
    conn.close()
    
    return stats, workout_types

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ–±–µ–≥"
def my_stats(update, context):
    user = update.message.from_user
    user_id = user.id
    
    stats_week, workout_types_week = get_user_stats(user_id, days=7)
    stats_month, workout_types_month = get_user_stats(user_id, days=30)
    
    if not stats_week or not stats_week[0]:
        update.message.reply_text(
            f"üìä {user.first_name}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–µ–∂–∫–∏ —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π –∏ —Ö–µ—à—Ç–µ–≥–æ–º #—è–ø–æ–±–µ–≥–∞–ª!",
            reply_markup=get_main_keyboard()
        )
        return
    
    workouts_week, total_week, avg_week = stats_week
    workouts_month, total_month, avg_month = stats_month
    
    message = f"üèÉ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.first_name}**\n\n"
    message += f"üìÖ **–ó–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:**\n"
    message += f"   ‚Ä¢ –ü—Ä–æ–±–µ–∂–∫–∏: {workouts_week}\n"
    message += f"   ‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_week:.1f} –∫–º\n"
    message += f"   ‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º: {avg_week:.1f} –∫–º/–ø—Ä–æ–±–µ–≥\n\n"
    
    message += f"üìÖ **–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:**\n"
    message += f"   ‚Ä¢ –ü—Ä–æ–±–µ–∂–∫–∏: {workouts_month}\n"
    message += f"   ‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_month:.1f} –∫–º\n"
    message += f"   ‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º: {avg_month:.1f} –∫–º/–ø—Ä–æ–±–µ–≥\n"
    
    update.message.reply_text(message, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
def help_command(update, context):
    help_text = """ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

üì∏ **–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:
‚Ä¢ 5 –∫–º #—è–ø–æ–±–µ–≥–∞–ª - –¥–ª—è –±–µ–≥–∞
‚Ä¢ 20 –∫–º #—è–ø–æ–∫—Ä—É—Ç–∏–ª - –¥–ª—è –≤–µ–ª–æ
‚Ä¢ 1 –∫–º #—è–ø–æ–ø–ª–∞–≤–∞–ª - –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è

‚ö° **–ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏!**
–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ #—è–ø–æ–±–µ–≥–∞–ª/#—è–ø–æ–∫—Ä—É—Ç–∏–ª/#—è–ø–æ–ø–ª–∞–≤–∞–ª –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.

üìä **–ö–Ω–æ–ø–∫–∏:**
‚Ä¢ üèÉ –ú–æ–π –ø—Ä–æ–±–µ–≥ - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏ - —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ üìä –¢–æ–ø –º–µ—Å—è—Ü–∞ - —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –º–µ—Å—è—Ü"""
    
    update.message.reply_text(help_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ - –¢–û–õ–¨–ö–û —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
def handle_photo_with_text(update, context):
    message = update.message
    user = update.message.from_user
    caption = message.caption

    if not caption:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏

    caption_lower = caption.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤
    workout_type = None
    if '#—è–ø–æ–±–µ–≥–∞–ª' in caption_lower:
        workout_type = 'run'
    elif '#—è–ø–æ–∫—Ä—É—Ç–∏–ª' in caption_lower:
        workout_type = 'bike'
    elif '#—è–ø–æ–ø–ª–∞–≤–∞–ª' in caption_lower:
        workout_type = 'swim'
    
    if not workout_type:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤

    # –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    matches = re.search(r'(\d+[.,]?\d*)\s*(–∫–º|km|–ö–ú)', caption, re.IGNORECASE)
    if matches:
        try:
            distance_str = matches.group(1).replace(',', '.')
            distance_km = float(distance_str)
            
            user_name = user.first_name or user.username or "–ê–Ω–æ–Ω–∏–º"
            save_workout(user.id, user_name, workout_type, distance_km)
            
            update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! {distance_km} –∫–º",
                reply_markup=get_main_keyboard()
            )
        except ValueError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –Ω–µ –Ω–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞
            return
    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        return

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–ø–∞
def get_top_workouts(days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
        SELECT user_name, SUM(distance) as total_distance 
        FROM workouts 
        WHERE date > ? 
        GROUP BY user_id 
        ORDER BY total_distance DESC 
        LIMIT 10
    ''', (since_date,))
    top_list = cursor.fetchall()
    conn.close()
    return top_list

def top_week(update, context):
    top_list = get_top_workouts(7)
    send_top_message(update, top_list, "–Ω–µ–¥–µ–ª—é")

def top_month(update, context):
    top_list = get_top_workouts(30)
    send_top_message(update, top_list, "–º–µ—Å—è—Ü")

def send_top_message(update, top_list, period_name):
    if not top_list:
        update.message.reply_text(
            f"üèÜ –ó–∞ {period_name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.",
            reply_markup=get_main_keyboard()
        )
        return
        
    message_text = f"üèÜ –¢–û–ü-10 –∑–∞ {period_name}:\n\n"
    for i, (user_name, total_distance) in enumerate(top_list, 1):
        message_text += f"{i}. {user_name}: {total_distance:.1f} –∫–º\n"
        
    update.message.reply_text(message_text, reply_markup=get_main_keyboard())

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("top_week", top_week))
    dispatcher.add_handler(CommandHandler("top_month", top_month))
    dispatcher.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ - –ü–†–û–°–¢–´–ï —Ñ–∏–ª—å—Ç—Ä—ã
    dispatcher.add_handler(MessageHandler(Filters.text("üèÉ –ú–æ–π –ø—Ä–æ–±–µ–≥"), my_stats))
    dispatcher.add_handler(MessageHandler(Filters.text("üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏"), top_week))
    dispatcher.add_handler(MessageHandler(Filters.text("üìä –¢–æ–ø –º–µ—Å—è—Ü–∞"), top_month))
    dispatcher.add_handler(MessageHandler(Filters.text("‚ùì –ü–æ–º–æ—â—å"), help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    dispatcher.add_handler(MessageHandler(Filters.photo, handle_photo_with_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
