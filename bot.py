import logging
import sqlite3
import re
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '8029857232:AAEi8YfRTWafF2M8jQnOQae1Xg25bdqw6Ds')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            user_name TEXT,
            workout_type TEXT NOT NULL,
            distance REAL NOT NULL,
            date TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_workout(user_id, user_name, workout_type, distance):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
        INSERT INTO workouts (user_id, user_name, workout_type, distance, date)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, user_name, workout_type, distance, current_time))
    conn.commit()
    conn.close()

# –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –õ–°)
def reply_private(update, text):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.message.from_user.send_message(text)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç–µ –Ω–æ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–æ–º–∞–Ω–¥—É
            update.message.delete()
        except:
            pass
        # –û—Ç–≤–µ—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ—Ç–æ—Ä–æ–µ —Å–∞–º–æ —É–¥–∞–ª–∏—Ç—Å—è
        msg = update.message.reply_text(text)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# –ö–æ–º–∞–Ω–¥—ã
def start(update, context):
    reply_private(update,
        "üèÉ –ë–µ–≥–æ–≤–æ–π –±–æ—Ç\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n" 
        "/stats - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/top_week - —Ç–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—É–±–ª–∏—á–Ω—ã–π)\n"
        "/top_month - —Ç–æ–ø –∑–∞ –º–µ—Å—è—Ü (–ø—É–±–ª–∏—á–Ω—ã–π)\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "5 –∫–º #—è–ø–æ–±–µ–≥–∞–ª - –¥–ª—è –±–µ–≥–∞\n"
        "20 –∫–º #—è–ø–æ–∫—Ä—É—Ç–∏–ª - –¥–ª—è –≤–µ–ª–æ\n"
        "1 –∫–º #—è–ø–æ–ø–ª–∞–≤–∞–ª - –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    )

def get_user_stats(user_id, days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT COUNT(*), SUM(distance), AVG(distance) FROM workouts WHERE user_id = ? AND date > ?', (user_id, since_date))
    stats = cursor.fetchone()
    conn.close()
    return stats

# –ö–æ–º–∞–Ω–¥–∞ /week
def week_stats(update, context):
    user = update.message.from_user
    stats = get_user_stats(user.id, 7)
    
    if not stats or not stats[0]:
        reply_private(update, "üìä –ó–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return
    
    workouts, total, avg = stats
    reply_private(update, f"üìÖ –ù–µ–¥–µ–ª—è: {workouts} –ø—Ä–æ–±–µ–∂–µ–∫, {total:.1f} –∫–º, –≤ —Å—Ä–µ–¥–Ω–µ–º {avg:.1f} –∫–º")

# –ö–æ–º–∞–Ω–¥–∞ /stats
def all_stats(update, context):
    user = update.message.from_user
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT distance, date FROM workouts WHERE user_id = ? ORDER BY date DESC LIMIT 10', (user.id,))
    workouts = cursor.fetchall()
    conn.close()
    
    if not workouts:
        reply_private(update, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return
    
    message = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
    for distance, date in workouts:
        message += f"‚Ä¢ {distance:.1f} –∫–º ({date[:10]})\n"
    
    reply_private(update, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
def handle_workout_message(update, context):
    text = update.message.text
    user = update.message.from_user
    
    if not text:
        return
    
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    workout_type = None
    if '#—è–ø–æ–±–µ–≥–∞–ª' in text_lower:
        workout_type = 'run'
    elif '#—è–ø–æ–∫—Ä—É—Ç–∏–ª' in text_lower:
        workout_type = 'bike'
    elif '#—è–ø–æ–ø–ª–∞–≤–∞–ª' in text_lower:
        workout_type = 'swim'
    else:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ö–µ—à—Ç–µ–≥–∞
    
    # –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    matches = re.search(r'(\d+[.,]?\d*)\s*(–∫–º|km)', text, re.IGNORECASE)
    if matches:
        try:
            distance_str = matches.group(1).replace(',', '.')
            distance_km = float(distance_str)
            
            user_name = user.first_name or user.username or "–ê–Ω–æ–Ω–∏–º"
            save_workout(user.id, user_name, workout_type, distance_km)
            
            # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –∑–∞–ø–∏—Å–∏
            reply_private(update, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! {distance_km} –∫–º")
        except ValueError:
            pass

# –¢–æ–ø—ã (–ø—É–±–ª–∏—á–Ω—ã–µ - –≤–∏–¥–Ω—ã –≤—Å–µ–º)
def get_top_workouts(days=7):
    conn = sqlite3.connect('workouts.db')
    cursor = conn.cursor()
    since_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('SELECT user_name, SUM(distance) FROM workouts WHERE date > ? GROUP BY user_id ORDER BY SUM(distance) DESC LIMIT 10', (since_date,))
    top_list = cursor.fetchall()
    conn.close()
    return top_list

def top_week(update, context):
    top_list = get_top_workouts(7)
    send_top_message(update, top_list, "–Ω–µ–¥–µ–ª—é")

def top_month(update, context):
    top_list = get_top_workouts(30)
    send_top_message(update, top_list, "–º–µ—Å—è—Ü")

def send_top_message(update, top_list, period_name):
    if not top_list:
        reply_private(update, f"üèÜ –ó–∞ {period_name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
        
    message = f"üèÜ –¢–û–ü –∑–∞ {period_name}:\n"
    for i, (user_name, distance) in enumerate(top_list, 1):
        message += f"{i}. {user_name}: {distance:.1f} –∫–º\n"
    
    # –¢–æ–ø—ã –ø—É–±–ª–∏—á–Ω—ã–µ - –≤–∏–¥–Ω—ã –≤—Å–µ–º –≤ —á–∞—Ç–µ
    try:
        update.message.reply_text(message)
    except:
        reply_private(update, message)

def main():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("week", week_stats))
    dispatcher.add_handler(CommandHandler("stats", all_stats))
    dispatcher.add_handler(CommandHandler("top_week", top_week))
    dispatcher.add_handler(CommandHandler("top_month", top_month))
    dispatcher.add_handler(CommandHandler("help", start))  # help = start

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_workout_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
